import{g as p,ct as a,aa as s,ab as o,ac as g}from"./vendor.4dd88096.js";import{f as m,u as l}from"./LayerView.c7dfc767.js";import{i as n}from"./GraphicContainer.df805caf.js";import{r as c}from"./BaseGraphicContainer.06e90be8.js";import"./Container.9089f1b2.js";import"./Utils.9fa24473.js";import"./enums.84480fc7.js";import"./enums.457e23f9.js";import"./Texture.5cc992b3.js";import"./VertexElementDescriptor.0406f2d4.js";import"./CIMSymbolHelper.1b9868e3.js";import"./BidiEngine.b9926823.js";import"./MaterialKey.e967c454.js";import"./GeometryUtils.e53da643.js";import"./projectionSupport.1f2e9c45.js";import"./json.da51edc4.js";import"./VertexArrayObject.3d1072dc.js";import"./FeatureContainer.5ec8e69e.js";import"./TileContainer.0e27a280.js";import"./WGLContainer.c9c15fea.js";import"./pixelUtils.1d93d897.js";import"./ProgramTemplate.315ac4f9.js";import"./StyleDefinition.809d5a5e.js";import"./config.bd364997.js";import"./GeometryUtils.5ea26345.js";import"./earcut.91e104de.js";import"./visualVariablesUtils.77e2c643.js";import"./visualVariablesUtils.985ba3a7.js";import"./Matcher.ad38a2a9.js";import"./tileUtils.3b62fb45.js";import"./TileClipper.78e3d1a7.js";import"./Geometry.e891c191.js";import"./ExpandedCIM.dbb41408.js";import"./quantizationUtils.cd7a121d.js";import"./devEnvironmentUtils.f51567b1.js";import"./schemaUtils.9eb3ba39.js";import"./createSymbolSchema.f2b5884a.js";import"./MD5.67d7a872.js";import"./util.972ab664.js";import"./ComputedAttributeStorage.caf3da01.js";import"./vec3f32.8179e08f.js";const d={remove(){},pause(){},resume(){}};let h=class extends m(l){constructor(){super(...arguments),this._highlightIds=new Map}attach(){this.graphicsView=new c({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new n(this.view.featuresTilingScheme)}),this._updateHighlight(),this.container.addChild(this.graphicsView.container),this.handles.add(this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler),"graphicslayerview2d")}detach(){this.container.removeAllChildren(),this.graphicsView.destroy(),this.graphicsView=null,this.handles.remove("graphicslayerview2d")}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i):null}async fetchPopupFeatures(i){if(this.graphicsView)return this.graphicsView.hitTest(i).filter(t=>!!t.popupTemplate)}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}moveStart(){}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i){var t;let e;return typeof i=="number"?e=[i]:i instanceof p?e=[i.uid]:Array.isArray(i)&&i.length>0?e=typeof i[0]=="number"?i:i.map(r=>r&&r.uid):a.isCollection(i)&&i.length>0&&(e=i.map(r=>r&&r.uid).toArray()),e=(t=e)==null?void 0:t.filter(r=>r!=null),e.length?(this._addHighlight(e),{remove:()=>this._removeHighlight(e)}):d}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;e===0?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){var i;(i=this.graphicsView)==null||i.setHighlight(Array.from(this._highlightIds.keys()))}};s([o()],h.prototype,"graphicsView",void 0),h=s([g("esri.views.2d.layers.GraphicsLayerView2D")],h);const ei=h;export{ei as default};
