import{s as Z,aa as O,ab as j,co as tt,ac as et,cp as it,q as st,t as L,bd as nt,r as E}from"./vendor.4dd88096.js";var V;const N=Z.getLogger("esri.layers.support.PixelBlock");let I=V=class extends it{constructor(t){super(t),this.width=null,this.height=null,this.pixelType="f32",this.validPixelCount=null,this.mask=null,this.maskIsAlpha=!1,this.pixels=null,this.statistics=null}static createEmptyBand(t,s){return new(V.getPixelArrayConstructor(t))(s)}static getPixelArrayConstructor(t){let s;switch(t){case"u1":case"u2":case"u4":case"u8":s=Uint8Array;break;case"u16":s=Uint16Array;break;case"u32":s=Uint32Array;break;case"s8":s=Int8Array;break;case"s16":s=Int16Array;break;case"s32":s=Int32Array;break;case"f32":case"c64":case"c128":case"unknown":s=Float32Array;break;case"f64":s=Float64Array}return s}castPixelType(t){if(!t)return"f32";let s=t.toLowerCase();return["u1","u2","u4"].indexOf(s)>-1?s="u8":["unknown","u8","s8","u16","s16","u32","s32","f32","f64"].indexOf(s)===-1&&(s="f32"),s}getPlaneCount(){return this.pixels&&this.pixels.length}addData(t){if(!t.pixels||t.pixels.length!==this.width*this.height)throw new st("pixelblock:invalid-or-missing-pixels","add data requires valid pixels array that has same length defined by pixel block width * height");this.pixels||(this.pixels=[]),this.statistics||(this.statistics=[]),this.pixels.push(t.pixels),this.statistics.push(t.statistics||{minValue:null,maxValue:null})}getAsRGBA(){const t=new ArrayBuffer(this.width*this.height*4);switch(this.pixelType){case"s8":case"s16":case"u16":case"s32":case"u32":case"f32":case"f64":this._fillFromNon8Bit(t);break;default:this._fillFrom8Bit(t)}return new Uint8ClampedArray(t)}getAsRGBAFloat(){const t=new Float32Array(this.width*this.height*4);return this._fillFrom32Bit(t),t}updateStatistics(){this.statistics=this.pixels.map(i=>this._calculateBandStatistics(i,this.mask));const t=this.mask;let s=0;if(t)for(let i=0;i<t.length;i++)t[i]&&s++;else s=this.width*this.height;this.validPixelCount=s}clamp(t){if(!t||t==="f64"||t==="f32")return;let s;switch(t){case"u8":s=[0,255];break;case"u16":s=[0,65535];break;case"u32":s=[0,4294967295];break;case"s8":s=[-128,127];break;case"s16":s=[-32768,32767];break;case"s32":s=[-2147483648,2147483647];break;default:s=[-34e38,34e38]}const[i,r]=s,f=this.pixels,o=this.width*this.height,a=f.length;let c,e,u;const x=[];for(let n=0;n<a;n++){u=V.createEmptyBand(t,o),c=f[n];for(let l=0;l<o;l++)e=c[l],u[l]=e>r?r:e<i?i:e;x.push(u)}this.pixels=x,this.pixelType=t}extractBands(t){if(L(t)||t.length===0||this.pixels==null||this.pixels.length===0)return this;const s=this.pixels.length,i=t.some(f=>f>=this.pixels.length),r=s===t.length&&!t.some((f,o)=>f!==o);return i||r?this:new V({pixelType:this.pixelType,width:this.width,height:this.height,mask:this.mask,validPixelCount:this.validPixelCount,maskIsAlpha:this.maskIsAlpha,pixels:t.map(f=>this.pixels[f]),statistics:this.statistics&&t.map(f=>this.statistics[f])})}clone(){const t=new V({width:this.width,height:this.height,pixelType:this.pixelType,maskIsAlpha:this.maskIsAlpha,validPixelCount:this.validPixelCount});let s;this.mask&&(this.mask instanceof Uint8Array?t.mask=new Uint8Array(this.mask):t.mask=this.mask.slice(0));const i=V.getPixelArrayConstructor(this.pixelType);if(this.pixels&&this.pixels.length>0){t.pixels=[];const r=this.pixels[0].slice;for(s=0;s<this.pixels.length;s++)t.pixels[s]=r?this.pixels[s].slice(0,this.pixels[s].length):new i(this.pixels[s])}if(this.statistics)for(t.statistics=[],s=0;s<this.statistics.length;s++)t.statistics[s]=nt(this.statistics[s]);return t}_fillFrom8Bit(t){const{mask:s,maskIsAlpha:i,pixels:r}=this;if(!t||!r||!r.length)return void N.error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");let f,o,a,c;f=o=a=r[0],r.length>=3?(o=r[1],a=r[2]):r.length===2&&(o=r[1]);const e=new Uint32Array(t),u=this.width*this.height;if(f.length===u)if(s&&s.length===u)if(i)for(c=0;c<u;c++)s[c]&&(e[c]=s[c]<<24|a[c]<<16|o[c]<<8|f[c]);else for(c=0;c<u;c++)s[c]&&(e[c]=255<<24|a[c]<<16|o[c]<<8|f[c]);else for(c=0;c<u;c++)e[c]=255<<24|a[c]<<16|o[c]<<8|f[c];else N.error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.")}_fillFromNon8Bit(t){const{pixels:s,mask:i,statistics:r}=this;if(!t||!s||!s.length)return void N.error("getAsRGBA()","Unable to convert to RGBA. The input pixel block is empty.");const f=this.pixelType;let o=1,a=0,c=1;if(r&&r.length>0)a=r.map(m=>m.minValue).reduce((m,g)=>Math.min(m,g)),c=r.map(m=>m.maxValue-m.minValue).reduce((m,g)=>Math.max(m,g)),o=255/c;else{let m=255;f==="s8"?(a=-128,m=127):f==="u16"?m=65535:f==="s16"?(a=-32768,m=32767):f==="u32"?m=4294967295:f==="s32"?(a=-2147483648,m=2147483647):f==="f32"?(a=-34e38,m=34e38):f==="f64"&&(a=-Number.MAX_VALUE,m=Number.MAX_VALUE),o=255/(m-a)}const e=new Uint32Array(t),u=this.width*this.height;let x,n,l,h,p;if(x=n=l=s[0],x.length!==u)return N.error("getAsRGBA()","Unable to convert to RGBA. The pixelblock is invalid.");if(s.length>=2)if(n=s[1],s.length>=3&&(l=s[2]),i&&i.length===u)for(h=0;h<u;h++)i[h]&&(e[h]=255<<24|(l[h]-a)*o<<16|(n[h]-a)*o<<8|(x[h]-a)*o);else for(h=0;h<u;h++)e[h]=255<<24|(l[h]-a)*o<<16|(n[h]-a)*o<<8|(x[h]-a)*o;else if(i&&i.length===u)for(h=0;h<u;h++)p=(x[h]-a)*o,i[h]&&(e[h]=255<<24|p<<16|p<<8|p);else for(h=0;h<u;h++)p=(x[h]-a)*o,e[h]=255<<24|p<<16|p<<8|p}_fillFrom32Bit(t){const{pixels:s,mask:i}=this;if(!t||!s||!s.length)return N.error("getAsRGBAFloat()","Unable to convert to RGBA. The input pixel block is empty.");let r,f,o,a;r=f=o=s[0],s.length>=3?(f=s[1],o=s[2]):s.length===2&&(f=s[1]);const c=this.width*this.height;if(r.length!==c)return N.error("getAsRGBAFloat()","Unable to convert to RGBA. The pixelblock is invalid.");let e=0;if(i&&i.length===c)for(a=0;a<c;a++)t[e++]=r[a],t[e++]=f[a],t[e++]=o[a],t[e++]=1&i[a];else for(a=0;a<c;a++)t[e++]=r[a],t[e++]=f[a],t[e++]=o[a],t[e++]=1}_calculateBandStatistics(t,s){let i=1/0,r=-1/0;const f=t.length;let o,a=0;if(s)for(o=0;o<f;o++)s[o]&&(a=t[o],i=a<i?a:i,r=a>r?a:r);else for(o=0;o<f;o++)a=t[o],i=a<i?a:i,r=a>r?a:r;return{minValue:i,maxValue:r}}};O([j({json:{write:!0}})],I.prototype,"width",void 0),O([j({json:{write:!0}})],I.prototype,"height",void 0),O([j({json:{write:!0}})],I.prototype,"pixelType",void 0),O([tt("pixelType")],I.prototype,"castPixelType",null),O([j({json:{write:!0}})],I.prototype,"validPixelCount",void 0),O([j({json:{write:!0}})],I.prototype,"mask",void 0),O([j({json:{write:!0}})],I.prototype,"maskIsAlpha",void 0),O([j({json:{write:!0}})],I.prototype,"pixels",void 0),O([j({json:{write:!0}})],I.prototype,"statistics",void 0),I=V=O([et("esri.layers.support.PixelBlock")],I);const G=I;function S(t){return E(t)&&t.declaredClass==="esri.layers.support.PixelBlock"&&t.pixels&&t.pixels.length>0}function pt(t,s){if(s==null||!s.length||!S(t))return t;const i=t.pixels.length;return s&&s.some(r=>r>=i)||i===1&&s.length===1&&s[0]===0?t:i!==s.length||s.some((r,f)=>r!==f)?new G({pixelType:t.pixelType,width:t.width,height:t.height,mask:t.mask,validPixelCount:t.validPixelCount,maskIsAlpha:t.maskIsAlpha,pixels:s.map(r=>t.pixels[r]),statistics:t.statistics&&s.map(r=>t.statistics[r])}):t}function xt(t){if(!t)return;const s=t.colormap;if(!s||s.length===0)return;const i=s.sort((n,l)=>n[0]-l[0]);let r=0;i[0][0]<0&&(r=i[0][0]);const f=Math.max(256,i[i.length-1][0]-r+1),o=new Uint8Array(4*f),a=[];let c,e=0,u=0;const x=i[0].length===5;if(f>65536)return i.forEach(n=>{a[n[0]-r]=x?n.slice(1):n.slice(1).concat([255])}),{indexed2DColormap:a,offset:r,alphaSpecified:x};if(t.fillUnspecified)for(c=i[u],e=c[0]-r;e<f;e++)o[4*e]=c[1],o[4*e+1]=c[2],o[4*e+2]=c[3],o[4*e+3]=x?c[4]:255,e===c[0]-r&&(c=u===i.length-1?c:i[++u]);else for(e=0;e<i.length;e++)c=i[e],u=4*(c[0]-r),o[u]=c[1],o[u+1]=c[2],o[u+2]=c[3],o[u+3]=x?c[4]:255;return{indexedColormap:o,offset:r,alphaSpecified:x}}function mt(t,s){if(!S(t)||!s&&(s.indexedColormap||s.indexed2DColormap))return t;const i=t.clone(),r=i.pixels;let f=i.mask;const o=i.width*i.height;if(r.length!==1)return t;const{indexedColormap:a,indexed2DColormap:c,offset:e,alphaSpecified:u}=s,x=a.length-1;let n=0;const l=r[0],h=new Uint8Array(l.length),p=new Uint8Array(l.length),m=new Uint8Array(l.length);let g,d=0;if(a)if(f)for(n=0;n<o;n++)f[n]&&(d=4*(l[n]-e),d<e||d>x?f[n]=0:(h[n]=a[d],p[n]=a[d+1],m[n]=a[d+2],f[n]=a[d+3]));else{for(f=new Uint8Array(o),n=0;n<o;n++)d=4*(l[n]-e),d<e||d>x?f[n]=0:(h[n]=a[d],p[n]=a[d+1],m[n]=a[d+2],f[n]=a[d+3]);i.mask=f}else if(f)for(n=0;n<o;n++)f[n]&&(g=c[l[n]],h[n]=g[0],p[n]=g[1],m[n]=g[2],f[n]=g[3]);else{for(f=new Uint8Array(o),n=0;n<o;n++)g=c[l[n]],h[n]=g[0],p[n]=g[1],m[n]=g[2],f[n]=g[3];i.mask=f}return i.pixels=[h,p,m],i.statistics=null,i.pixelType="u8",i.maskIsAlpha=u,i}function dt(t){if(!S(t))return null;t.statistics||t.updateStatistics();const{pixels:s,mask:i,pixelType:r,statistics:f}=t,o=t.width*t.height,a=s.length;let c,e,u,x,n;const l=[],h=[];let p,m,g,d,y,k,w,A,T,U;const v=256;for(x=0;x<a;x++){if(p=new Uint32Array(v),g=s[x],r==="u8")if(c=-.5,e=255.5,i)for(n=0;n<o;n++)i[n]&&p[g[n]]++;else for(n=0;n<o;n++)p[g[n]]++;else{if(c=f[x].minValue,e=f[x].maxValue,u=(e-c)/v,m=new Uint32Array(v+1),i)for(n=0;n<o;n++)i[n]&&m[Math.floor((g[n]-c)/u)]++;else for(n=0;n<o;n++)m[Math.floor((g[n]-c)/u)]++;for(n=0;n<255;n++)p[n]=m[n];p[255]=m[255]+m[256]}for(l.push({min:c,max:e,size:v,counts:p}),d=0,y=0,A=0,n=0;n<v;n++)d+=p[n],y+=n*p[n];for(T=y/d,n=0;n<v;n++)A+=p[n]*(n-T)**2;U=Math.sqrt(A/(d-1)),u=(e-c)/v,k=(T+.5)*u+c,w=U*u,h.push({min:c,max:e,avg:k,stddev:w})}return{statistics:h,histograms:l}}function gt(t){const s=[];for(let i=0;i<t.length;i++){const{min:r,max:f,size:o,counts:a}=t[i];let c=0,e=0;for(let p=0;p<o;p++)c+=a[p],e+=p*a[p];const u=e/c;let x=0;for(let p=0;p<o;p++)x+=a[p]*(p-u)**2;const n=(f-r)/o,l=(u+.5)*n+r,h=Math.sqrt(x/(c-1))*n;s.push({min:r,max:f,avg:l,stddev:h})}return s}function yt(t){const{minCutOff:s,maxCutOff:i,gamma:r,pixelType:f}=t,o=t.outMin||0,a=t.outMax||255;if(["u8","u16","s8","s16"].indexOf(f)===-1)return null;const c=s.length;let e,u,x=0;f==="s8"?x=-127:f==="s16"&&(x=-32767);let n=256;["u16","s16"].indexOf(f)>-1&&(n=65536);const l=[],h=[],p=a-o;for(e=0;e<c;e++)h[e]=i[e]-s[e],l[e]=p/(i[e]-s[e]);const m=r&&r.length>=c,g=[];if(m)for(e=0;e<c;e++)r[e]>1?r[e]>2?g[e]=6.5+(r[e]-2)**2.5:g[e]=6.5+100*(2-r[e])**4:g[e]=1;let d;const y=[];let k,w,A;if(m)for(e=0;e<c;e++){for(A=[],u=0;u<n;u++)k=u+x,d=(k-s[e])/h[e],w=1,r[e]>1&&(w-=(1/p)**(d*g[e])),k<i[e]&&k>s[e]?A[u]=Math.floor(w*p*d**(1/r[e]))+o:k>=i[e]?A[u]=a:A[u]=o;y[e]=A}else for(e=0;e<c;e++){for(A=[],u=0;u<n;u++)k=u+x,k<=s[e]?A[u]=o:k>=i[e]?A[u]=a:A[u]=Math.floor((k-s[e])/h[e]*p)+o;y[e]=A}if(t.contrastOffset!=null){const T=lt(t.contrastOffset,t.brightnessOffset);for(e=0;e<c;e++)for(A=y[e],u=0;u<n;u++)A[u]=T[A[u]]}return{lut:y,offset:x}}function lt(t,s){const i=Math.min(Math.max(t,-100),100),r=Math.min(Math.max(s,-100),100),f=255,o=128;let a,c;const e=new Uint8Array(256);for(a=0;a<256;a++)i>0&&i<100?c=(200*a-100*f+2*f*r)/(2*(100-i))+o:i<=0&&i>-100?c=(200*a-100*f+2*f*r)*(100+i)/2e4+o:i===100?(c=200*a-100*f+(f+1)*(100-i)+2*f*r,c=c>0?f:0):i===-100&&(c=o),e[a]=c>f?f:c<0?0:c;return e}function wt(t,s=256){s=Math.min(s,256);const{size:i,counts:r}=t,f=new Uint8Array(i),o=r.reduce((x,n)=>x+n/s,0);let a=0,c=0,e=0,u=o;for(let x=0;x<i;x++)if(e+=r[x],!(x<i-1&&e+r[x+1]<u)){for(;a<s-1&&u<e;)a++,u+=o;for(let n=c;n<=x;n++)f[n]=a;c=x+1}for(let x=c;x<i;x++)f[x]=s-1;return f}function kt(t,s){if(!S(t))return null;const i=t.clone(),{pixels:r,mask:f}=i,{minCutOff:o,maxCutOff:a,gamma:c}=s,e=s.outMin||0,u=s.outMax||255,x=i.width*i.height,n=r.length;let l,h,p,m,g;const d=u-e,y=[],k=[];for(l=0;l<n;l++)k[l]=a[l]-o[l],y[l]=d/(a[l]-o[l]);const w=c&&c.length>=n,A=[];if(w)for(l=0;l<n;l++)c[l]>1?c[l]>2?A[l]=6.5+(c[l]-2)**2.5:A[l]=6.5+100*(2-c[l])**4:A[l]=1;if(w)if(f!=null){for(h=0;h<x;h++)if(f[h])for(l=0;l<n;l++)p=r[l][h],g=(p-o[l])/k[l],m=1,c[l]>1&&(m-=(1/d)**(g*A[l])),p<a[l]&&p>o[l]?r[l][h]=Math.floor(m*d*g**(1/c[l]))+e:p>=a[l]?r[l][h]=u:r[l][h]=e}else for(h=0;h<x;h++)for(l=0;l<n;l++)p=r[l][h],g=(p-o[l])/k[l],m=1,c[l]>1&&(m-=(1/d)**(g*A[l])),p<a[l]&&p>o[l]?r[l][h]=Math.floor(m*d*g**(1/c[l]))+e:p>=a[l]?r[l][h]=u:r[l][h]=e;else if(f!=null){for(h=0;h<x;h++)if(f[h])for(l=0;l<n;l++)p=r[l][h],p<a[l]&&p>o[l]?r[l][h]=Math.floor((p-o[l])/k[l]*d)+e:p>=a[l]?r[l][h]=u:r[l][h]=e}else for(h=0;h<x;h++)for(l=0;l<n;l++)p=r[l][h],p<a[l]&&p>o[l]?r[l][h]=Math.floor((p-o[l])/k[l]*d)+e:p>=a[l]?r[l][h]=u:r[l][h]=e;return i.pixelType="u8",i.updateStatistics(),i}function At(t,s){if(!S(t))return null;const{pixels:i,mask:r}=t,f=t.width*t.height,o=i.length;let a=s.lut;const{offset:c}=s;let e,u;a&&a[0].length===1&&(a=i.map(()=>a));const x=[];let n,l,h;if(c)if(r==null)for(e=0;e<o;e++){for(n=i[e],l=a[e],h=new Uint8Array(f),u=0;u<f;u++)h[u]=l[n[u]-c];x.push(h)}else for(e=0;e<o;e++){for(n=i[e],l=a[e],h=new Uint8Array(f),u=0;u<f;u++)r[u]&&(h[u]=l[n[u]-c]);x.push(h)}else if(r==null)for(e=0;e<o;e++){for(n=i[e],l=a[e],h=new Uint8Array(f),u=0;u<f;u++)h[u]=l[n[u]];x.push(h)}else for(e=0;e<o;e++){for(n=i[e],l=a[e],h=new Uint8Array(f),u=0;u<f;u++)r[u]&&(h[u]=l[n[u]]);x.push(h)}const p=new G({width:t.width,height:t.height,pixels:x,mask:r,pixelType:"u8"});return p.updateStatistics(),p}function Mt(t,s){if(!S(t))return null;const i=t.clone(),{pixels:r}=i,f=i.width*i.height,o=s.length,a=Math.floor(o/2),c=s[Math.floor(a)],e=r[0];let u,x,n,l,h,p,m=!1;const g=new Uint8Array(f),d=new Uint8Array(f),y=new Uint8Array(f);let k=i.mask;const w=s[0].mappedColor.length===4;for(k||(k=new Uint8Array(f),k.fill(w?255:1),i.mask=k),h=0;h<f;h++)if(k[h]){for(u=e[h],m=!1,p=a,x=c,n=0,l=o-1;l-n>1;){if(u===x.value){m=!0;break}u>x.value?n=p:l=p,p=Math.floor((n+l)/2),x=s[Math.floor(p)]}m||(u===s[n].value?(x=s[n],m=!0):u===s[l].value?(x=s[l],m=!0):u<s[n].value?(m=!1,x=null):u>s[n].value&&(u<s[l].value?(x=s[n],m=!0):l===o-1?(m=!1,x=null):(x=s[l],m=!0))),m?(g[h]=x.mappedColor[0],d[h]=x.mappedColor[1],y[h]=x.mappedColor[2],k[h]=x.mappedColor[3]):g[h]=d[h]=y[h]=k[h]=0}return i.pixels=[g,d,y],i.mask=k,i.pixelType="u8",i.maskIsAlpha=w,i}function rt(t,s,i,r,f,o,a,c){return{xmin:f<=i*t?0:f<i*t+t?f-i*t:t,ymin:o<=r*s?0:o<r*s+s?o-r*s:s,xmax:f+a<=i*t?0:f+a<i*t+t?f+a-i*t:t,ymax:o+c<=r*s?0:o+c<r*s+s?o+c-r*s:s}}function Ut(t,s){if(!t||t.length===0)return null;const i=t.find(p=>p.pixelBlock);if(!i||L(i.pixelBlock))return null;const r=(i.extent.xmax-i.extent.xmin)/i.pixelBlock.width,f=(i.extent.ymax-i.extent.ymin)/i.pixelBlock.height,o=.01*Math.min(r,f),a=t.sort((p,m)=>Math.abs(p.extent.ymax-m.extent.ymax)>o?m.extent.ymax-p.extent.ymax:Math.abs(p.extent.xmin-m.extent.xmin)>o?p.extent.xmin-m.extent.xmin:0),c=Math.min.apply(null,a.map(p=>p.extent.xmin)),e=Math.min.apply(null,a.map(p=>p.extent.ymin)),u=Math.max.apply(null,a.map(p=>p.extent.xmax)),x=Math.max.apply(null,a.map(p=>p.extent.ymax)),n={x:Math.round((s.xmin-c)/r),y:Math.round((x-s.ymax)/f)},l={width:Math.round((u-c)/r),height:Math.round((x-e)/f)},h={width:Math.round((s.xmax-s.xmin)/r),height:Math.round((s.ymax-s.ymin)/f)};return Math.round(l.width/i.pixelBlock.width)*Math.round(l.height/i.pixelBlock.height)!==a.length||n.x<0||n.y<0||l.width<h.width||l.height<h.height?null:{extent:s,pixelBlock:ot(a.map(p=>p.pixelBlock),l,{clipOffset:n,clipSize:h})}}function H(t,s,i,r,f,o){const{width:a,height:c}=i.block,{x:e,y:u}=i.offset,{width:x,height:n}=i.mosaic,l=rt(a,c,r,f,e,u,x,n);let h=0,p=0;if(o){const m=o.hasGCSSShiftTransform?360:o.halfWorldWidth,g=a*o.resolutionX,d=o.startX+r*g,y=d+g;d<m&&y>m?p=o.rightPadding:d>=m&&(h=o.leftMargin-o.rightPadding,p=0)}if(l.xmax-=p,typeof s!="number")for(let m=l.ymin;m<l.ymax;m++){const g=(f*c+m-u)*x+(r*a-e)+h,d=m*a;for(let y=l.xmin;y<l.xmax;y++)t[g+y]=s[d+y]}else for(let m=l.ymin;m<l.ymax;m++){const g=(f*c+m-u)*x+(r*a-e)+h;for(let d=l.xmin;d<l.xmax;d++)t[g+d]=s}}function ot(t,s,i={}){const{clipOffset:r,clipSize:f,alignmentInfo:o,blockWidths:a}=i;if(a)return at(t,s,{blockWidths:a});const c=t.find(U=>S(U));if(L(c))return null;const e=f?f.width:s.width,u=f?f.height:s.height,x=c.width,n=c.height,l=s.width/x,h=s.height/n,p={offset:r||{x:0,y:0},mosaic:f||s,block:{width:x,height:n}},m=c.pixelType,g=G.getPixelArrayConstructor(m),d=c.pixels.length,y=[];let k,w;for(let U=0;U<d;U++){w=new g(e*u);for(let v=0;v<h;v++)for(let M=0;M<l;M++){const B=t[v*l+M];S(B)&&(k=B.pixels[U],H(w,k,p,M,v,o))}y.push(w)}let A;if(t.some(U=>L(U)||U.mask&&U.mask.length>0)){A=new Uint8Array(e*u);for(let U=0;U<h;U++)for(let v=0;v<l;v++){const M=t[U*l+v],B=E(M)?M.mask:null;H(A,B||(M?1:0),p,v,U,o)}}const T=new G({width:e,height:u,pixels:y,pixelType:m,mask:A});return T.updateStatistics(),T}function at(t,s,i){const r=t.find(h=>E(h));if(!E(r))return null;const f=t.some(h=>!E(h)||!!h.mask),{width:o,height:a}=s,c=f?new Uint8Array(o*a):null,{blockWidths:e}=i,u=[],x=r.getPlaneCount(),n=G.getPixelArrayConstructor(r.pixelType);if(f)for(let h=0,p=0;h<t.length;p+=e[h],h++){const m=t[h];if(!S(m))continue;const g=m.mask;for(let d=0;d<a;d++)for(let y=0;y<e[h];y++)c[d*o+y+p]=g==null?255:g[d*m.width+y]}for(let h=0;h<x;h++){const p=new n(o*a);for(let m=0,g=0;m<t.length;g+=e[m],m++){const d=t[m];if(!S(d))continue;const y=d.pixels[h];if(y!=null)for(let k=0;k<a;k++)for(let w=0;w<e[m];w++)p[k*o+w+g]=y[k*d.width+w]}u.push(p)}const l=new G({width:o,height:a,mask:c,pixels:u,pixelType:r.pixelType});return l.updateStatistics(),l}function vt(t,s,i){if(!S(t))return null;const{width:r,height:f}=t,o=s.x,a=s.y,c=i.width+o,e=i.height+a;if(o<0||a<0||c>r||e>f||o===0&&a===0&&c===r&&e===f)return t;t.mask||(t.mask=new Uint8Array(r*f));const u=t.mask;for(let x=0;x<f;x++){const n=x*r;for(let l=0;l<r;l++)u[n+l]=x<a||x>=e||l<o||l>=c?0:1}return t.updateStatistics(),t}function ht(t){if(!S(t))return null;const s=t.clone(),{width:i,height:r,pixels:f,mask:o}=t,a=f[0],c=s.pixels[0];for(let e=2;e<r-1;e++){const u=new Map;for(let n=e-2;n<e+2;n++)for(let l=0;l<4;l++){const h=n*i+l;W(u,a[h],o?o[h]:1)}c[e*i]=J(u),c[e*i+1]=c[e*i+2]=c[e*i];let x=3;for(;x<i-1;x++){let n=(e-2)*i+x+1;W(u,a[n],o?o[n]:1),n=(e-1)*i+x+1,W(u,a[n],o?o[n]:1),n=e*i+x+1,W(u,a[n],o?o[n]:1),n=(e+1)*i+x+1,W(u,a[n],o?o[n]:1),n=(e-2)*i+x-3,D(u,a[n],o?o[n]:1),n=(e-1)*i+x-3,D(u,a[n],o?o[n]:1),n=e*i+x-3,D(u,a[n],o?o[n]:1),n=(e+1)*i+x-3,D(u,a[n],o?o[n]:1),c[e*i+x]=J(u)}c[e*i+x+1]=c[e*i+x]}for(let e=0;e<i;e++)c[e]=c[i+e]=c[2*i+e],c[(r-1)*i+e]=c[(r-2)*i+e];return s.updateStatistics(),s}function J(t){if(t.size===0)return 0;let s=0,i=-1,r=0;const f=t.keys();let o=f.next();for(;!o.done;)r=t.get(o.value),r>s&&(i=o.value,s=r),o=f.next();return i}function D(t,s,i){if(i===0)return;const r=t.get(s);r===1?t.delete(s):t.set(s,r-1)}function W(t,s,i){i!==0&&t.set(s,t.has(s)?t.get(s)+1:1)}function ft(t,s,i){let{x:r,y:f}=s;const{width:o,height:a}=i;if(r===0&&f===0&&a===t.height&&o===t.width)return t;const{width:c,height:e}=t,u=Math.max(0,f),x=Math.max(0,r),n=Math.min(r+o,c),l=Math.min(f+a,e);if(n<0||l<0||!S(t))return null;r=Math.max(0,-r),f=Math.max(0,-f);const{pixels:h,mask:p}=t,m=o*a,g=h.length,d=[];for(let w=0;w<g;w++){const A=h[w],T=G.createEmptyBand(t.pixelType,m);for(let U=u;U<l;U++){const v=U*c;let M=(U+f-u)*o+r;for(let B=x;B<n;B++)T[M++]=A[v+B]}d.push(T)}const y=new Uint8Array(m);for(let w=u;w<l;w++){const A=w*c;let T=(w+f-u)*o+r;for(let U=x;U<n;U++)y[T++]=p?p[A+U]:1}const k=new G({width:i.width,height:i.height,pixelType:t.pixelType,pixels:d,mask:y});return k.updateStatistics(),k}function ct(t,s=!0){if(!S(t))return null;const{pixels:i,width:r,height:f,mask:o,pixelType:a}=t,c=[],e=Math.round(r/2),u=Math.round(f/2),x=f-1,n=r-1;for(let h=0;h<i.length;h++){const p=i[h],m=G.createEmptyBand(a,e*u);let g=0;for(let d=0;d<f;d+=2)for(let y=0;y<r;y+=2){const k=p[d*r+y];if(s){const w=y===n?k:p[d*r+y+1],A=d===x?k:p[d*r+y+r],T=y===n?A:d===x?w:p[d*r+y+r+1];m[g++]=(k+w+A+T)/4}else m[g++]=k}c.push(m)}let l=null;if(o){l=new Uint8Array(e*u);let h=0;for(let p=0;p<f;p+=2)for(let m=0;m<r;m+=2){const g=o[p*r+m];if(s){const d=m===n?g:o[p*r+m+1],y=p===x?g:o[p*r+m+r],k=m===n?y:p===x?d:o[p*r+m+r+1];l[h++]=g*d*y*k?1:0}else l[h++]=g}}return new G({width:e,height:u,pixelType:a,pixels:c,mask:l})}function bt(t,s,i){if(!S(t))return null;const{width:r,height:f}=s;let{width:o,height:a}=t;const c=new Map,e={x:0,y:0},u=i==null?1:1+i;let x=t;for(let n=0;n<u;n++){const l=Math.ceil(o/r),h=Math.ceil(a/f);for(let p=0;p<h;p++){e.y=p*f;for(let m=0;m<l;m++){e.x=m*r;const g=ft(x,e,s);c.set(`${n}/${p}/${m}`,g)}}n<u-1&&(x=ct(x)),o=Math.round(o/2),a=Math.round(a/2)}return c}function K(t,s,i,r,f=.5){const{width:o,height:a}=t,{width:c,height:e}=s,u=r.cols,x=r.rows,n=Math.ceil(c/u-.1/u),l=Math.ceil(e/x-.1/x);let h,p,m,g,d,y,k;const w=n*u,A=w*l*x,T=new Float32Array(A),U=new Float32Array(A),v=new Uint32Array(A),M=new Uint32Array(A);let B,R,P=0;for(let _=0;_<l;_++)for(let F=0;F<n;F++){h=12*(_*n+F),p=i[h],m=i[h+1],g=i[h+2],d=i[h+3],y=i[h+4],k=i[h+5];for(let C=0;C<x;C++){P=(_*x+C)*w+F*u,R=(C+.5)/x;for(let b=0;b<C;b++)B=(b+.5)/u,T[P+b]=(p*B+m*R+g)*o-f,U[P+b]=(d*B+y*R+k)*a-f,v[P+b]=Math.round(T[P+b]),M[P+b]=Math.round(U[P+b])}h+=6,p=i[h],m=i[h+1],g=i[h+2],d=i[h+3],y=i[h+4],k=i[h+5];for(let C=0;C<x;C++){P=(_*x+C)*w+F*u,R=(C+.5)/x;for(let b=C;b<u;b++)B=(b+.5)/u,T[P+b]=(p*B+m*R+g)*o-f,U[P+b]=(d*B+y*R+k)*a-f,v[P+b]=Math.round(T[P+b]),M[P+b]=Math.round(U[P+b])}}return{offsets_x:T,offsets_y:U,offsets_xi:v,offsets_yi:M,gridWidth:w}}function Tt(t,s){const{coefficients:i,spacing:r}=s,{offsets_x:f,offsets_y:o,gridWidth:a}=K(t,t,i,{rows:r[0],cols:r[1]},.5),{width:c,height:e}=t,u=new Float32Array(c*e),x=180/Math.PI;for(let n=0;n<e;n++)for(let l=0;l<c;l++){const h=n*a+l,p=n===0?h:h-a,m=n===e-1?h:h+a,g=f[p]-f[m],d=o[m]-o[p];if(isNaN(g)||isNaN(d))u[n*c+l]=90;else{let y=Math.atan2(d,g)*x;y=(360+y)%360,u[n*c+l]=y}}return u}function Bt(t,s,i,r,f="nearest"){if(!S(t))return null;f==="majority"&&(t=ht(t));const{pixels:o,mask:a,pixelType:c}=t,e=t.width,u=t.height,x=G.getPixelArrayConstructor(c),n=o.length,{width:l,height:h}=s;let p=!1;for(let M=0;M<i.length;M+=3)i[M]===-1&&i[M+1]===-1&&i[M+2]===-1&&(p=!0);const{offsets_x:m,offsets_y:g,offsets_xi:d,offsets_yi:y,gridWidth:k}=K({width:e,height:u},s,i,r,f==="majority"?0:.5);let w;const A=(M,B,R)=>{const P=M instanceof Float32Array||M instanceof Float64Array?0:.5;for(let _=0;_<h;_++){w=_*k;for(let F=0;F<l;F++){if(m[w]<0||g[w]<0)M[_*l+F]=0;else if(R)M[_*l+F]=B[d[w]+y[w]*e];else{const C=Math.floor(m[w]),b=Math.floor(g[w]),X=Math.ceil(m[w]),z=Math.ceil(g[w]),q=m[w]-C,$=g[w]-b;if(!a||a[C+b*e]&&a[C+b*e]&&a[C+z*e]&&a[X+z*e]){const Q=(1-q)*B[C+b*e]+q*B[X+b*e],Y=(1-q)*B[C+z*e]+q*B[X+z*e];M[_*l+F]=(1-$)*Q+$*Y+P}else M[_*l+F]=B[d[w]+y[w]*e]}w++}}},T=[];let U;for(let M=0;M<n;M++)U=new x(l*h),A(U,o[M],f==="nearest"||f==="majority"),T.push(U);const v=new G({width:l,height:h,pixelType:c,pixels:T});if(a)v.mask=new Uint8Array(l*h),A(v.mask,a,!0);else if(p){v.mask=new Uint8Array(l*h);for(let M=0;M<l*h;M++)v.mask[M]=m[M]<0||g[M]<0?0:1}return v.updateStatistics(),v}export{vt as M,Bt as O,kt as a,Tt as b,wt as c,Ut as d,gt as e,yt as f,S as i,pt as l,xt as o,Mt as p,mt as r,dt as s,G as u,bt as v,At as x,ot as y};
